{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"An awesome template for python projects using cutting edge tools Documentation : nullhack.github.io/pyproj Source Code : gh:nullhack/pyproj PyProj \u00b6 This project is made to be clean, simple to use and make the simplest Hello World ready for production. To achieve this, I stand on the shoulder of giants using, modifying and creating code from multiple sources and projects, into a cookiecutter project ready to be used. Quick start \u00b6 cookiecutter gh:nullhack/pyproj Running \u00b6 nullhack.github.io/pyproj/usage/running/ Testing \u00b6 nullhack.github.io/pyproj/usage/testing/ Features \u00b6 Behave : Behavior driven development (BDD) Black : Code formatter Cookiecutter : Create a project from a project template Coverage : Measure, collect, and report on code coverage Darglint : Check docstring validity Flake8 : Runs all the tools by launching the single command Isort : Sort Python import definitions Material mkdocs : Technical documentation using material design Nox : Automation toolkit Poetry : Dependency management and packaging Pre-commit : Manage and maintain pre-commit hooks Safety : Checks installed dependencies for known security vulnerabilities Xdoctest : Discover and run doctests within a python package Acknowledgement \u00b6 Fastapi Gitmoji Hypermodern python Google Style Guide","title":"Home"},{"location":"#pyproj","text":"This project is made to be clean, simple to use and make the simplest Hello World ready for production. To achieve this, I stand on the shoulder of giants using, modifying and creating code from multiple sources and projects, into a cookiecutter project ready to be used.","title":"PyProj"},{"location":"#quick_start","text":"cookiecutter gh:nullhack/pyproj","title":"Quick start"},{"location":"#running","text":"nullhack.github.io/pyproj/usage/running/","title":"Running"},{"location":"#testing","text":"nullhack.github.io/pyproj/usage/testing/","title":"Testing"},{"location":"#features","text":"Behave : Behavior driven development (BDD) Black : Code formatter Cookiecutter : Create a project from a project template Coverage : Measure, collect, and report on code coverage Darglint : Check docstring validity Flake8 : Runs all the tools by launching the single command Isort : Sort Python import definitions Material mkdocs : Technical documentation using material design Nox : Automation toolkit Poetry : Dependency management and packaging Pre-commit : Manage and maintain pre-commit hooks Safety : Checks installed dependencies for known security vulnerabilities Xdoctest : Discover and run doctests within a python package","title":"Features"},{"location":"#acknowledgement","text":"Fastapi Gitmoji Hypermodern python Google Style Guide","title":"Acknowledgement"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of conduct"},{"location":"code_of_conduct/#contributor_covenant_code_of_conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our_pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our_standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our_responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"contributing/","text":"Contributing to FOSS Projects \u00b6 Contributing to open source is easier than most people may think. It's just matter of learning a couple of basic tools and concepts. This guide will show some good practices that most FOSS (free and open source software) follow. Submiting issues \u00b6 Before sending new issues: Are you on the latest version? Have you tried older versions? Have you searched for old related issues? Have you tried the project's mailing list, IRC channel, etc. ? If nothing worked for you, It's time to create an issue report Writing a meaningful issue report \u00b6 Which version of the interpreter are you using? Which operating system are you using? Which version (tag) of this project are you using? What are the steps to reproduce the issue? Contributing changes \u00b6 Branching \u00b6 It's important to make your changes on a new branch. This makes easy for the maintainers to add your changes into the main project. Always branch off from the main/development branch. Ask if you are not sure. Code formating \u00b6 Follow the style of the main repository (e.g. PEP-8 ). Consistency is the key, always ask if you are not sure. Documenting \u00b6 Documenting a project relies on some sort of tool (mkdocs, sphinx, pdoc3, etc.), python projects use docstrings to help making this process easier. There's a plenty of docstring styles out there (e.g. Google , Numpy , etc.). Just follow the style of the project you're working on and ask if you're not sure. Testing \u00b6 Any good project include tests, if you are working on a bugfix, strive to achieve 100% code coverage and keep diverse set of unit tests using whatever package the project rely on (e.g. Pytest , Behave , Xdoctest , etc.). Workflow example \u00b6 The following workflow is specific for this project and might not work for other FOSS Preparing your Branch \u00b6 Click the button Fork on Github. This will create a project with same name inside your repository list Clone the forked repo: git clone git@github.com:USERNAME/PROJECT_NAME On terminal type: cd PROJECT_NAME Create a branch: git checkout -b BRANCH_NAME Creating commits \u00b6 Install the development requirements: pip install -r dev-requirements.txt Install the project dependencies under a poetry virtual environment: poetry install Activate poetry shell: poetry shell Make your changes Run tests, coverage report and pre-commit checks: nox Repeat steps 4 and 5 until all tests passed Commit the changes: gitmoji --commit Creating Pull Requests \u00b6 Push your changes to the forked repo: git push Go to Github website and click the button Pull request Write a description that explains the changes you've done and steps to reproduce Click submit Invite maintainers to review your code","title":"Contributing"},{"location":"contributing/#contributing_to_foss_projects","text":"Contributing to open source is easier than most people may think. It's just matter of learning a couple of basic tools and concepts. This guide will show some good practices that most FOSS (free and open source software) follow.","title":"Contributing to FOSS Projects"},{"location":"contributing/#submiting_issues","text":"Before sending new issues: Are you on the latest version? Have you tried older versions? Have you searched for old related issues? Have you tried the project's mailing list, IRC channel, etc. ? If nothing worked for you, It's time to create an issue report","title":"Submiting issues"},{"location":"contributing/#writing_a_meaningful_issue_report","text":"Which version of the interpreter are you using? Which operating system are you using? Which version (tag) of this project are you using? What are the steps to reproduce the issue?","title":"Writing a meaningful issue report"},{"location":"contributing/#contributing_changes","text":"","title":"Contributing changes"},{"location":"contributing/#branching","text":"It's important to make your changes on a new branch. This makes easy for the maintainers to add your changes into the main project. Always branch off from the main/development branch. Ask if you are not sure.","title":"Branching"},{"location":"contributing/#code_formating","text":"Follow the style of the main repository (e.g. PEP-8 ). Consistency is the key, always ask if you are not sure.","title":"Code formating"},{"location":"contributing/#documenting","text":"Documenting a project relies on some sort of tool (mkdocs, sphinx, pdoc3, etc.), python projects use docstrings to help making this process easier. There's a plenty of docstring styles out there (e.g. Google , Numpy , etc.). Just follow the style of the project you're working on and ask if you're not sure.","title":"Documenting"},{"location":"contributing/#testing","text":"Any good project include tests, if you are working on a bugfix, strive to achieve 100% code coverage and keep diverse set of unit tests using whatever package the project rely on (e.g. Pytest , Behave , Xdoctest , etc.).","title":"Testing"},{"location":"contributing/#workflow_example","text":"The following workflow is specific for this project and might not work for other FOSS","title":"Workflow example"},{"location":"contributing/#preparing_your_branch","text":"Click the button Fork on Github. This will create a project with same name inside your repository list Clone the forked repo: git clone git@github.com:USERNAME/PROJECT_NAME On terminal type: cd PROJECT_NAME Create a branch: git checkout -b BRANCH_NAME","title":"Preparing your Branch"},{"location":"contributing/#creating_commits","text":"Install the development requirements: pip install -r dev-requirements.txt Install the project dependencies under a poetry virtual environment: poetry install Activate poetry shell: poetry shell Make your changes Run tests, coverage report and pre-commit checks: nox Repeat steps 4 and 5 until all tests passed Commit the changes: gitmoji --commit","title":"Creating commits"},{"location":"contributing/#creating_pull_requests","text":"Push your changes to the forked repo: git push Go to Github website and click the button Pull request Write a description that explains the changes you've done and steps to reproduce Click submit Invite maintainers to review your code","title":"Creating Pull Requests"},{"location":"license/","text":"MIT License Copyright (c) 2020 NullHack Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"reference/cli.py/","text":"\"\"\"Command line interface. Awesome CLI description. \"\"\" import typer from pyproj.template import template_function app = typer . Typer () @app . command () def run ( show : bool = typer . Option ( None , \"--show\" , \"-s\" )): \"\"\"Awesome function.\"\"\" if show : typer . echo ( template_function ( \"hello world\" , show )) else : typer . echo ( \"*****\" ) if __name__ == \"__main__\" : app ()","title":"Cli.py"},{"location":"reference/pyproj/__init__.py/","text":"\"\"\"Awesome init file.\"\"\"","title":"  init  .py"},{"location":"reference/pyproj/template.py/","text":"\"\"\"Awesome template. A simple module showing how to use docstrings as defined by [Google Style Guide](https://google.github.io/styleguide/pyguide.html) Please visit the official website for a complete description. \"\"\" def template_function ( message : str , show : bool = True ) -> str : \"\"\"Return a message if `show` is True. Args: message (str): The message to be returned. show (bool): Flag to return the message. Return: The message. Is show is True, empty string otherwise. \"\"\" return message if show else \"\" class TemplateClass : \"\"\"Create a class, storing the value of the message as attribute. This is the documentation of public attributes for the class. A good documentation explains the usage of all parameters and attributes. \"\"\" def __init__ ( self , message : str , show : bool = True ): \"\"\"Create the documentation for `__init__` method. The `__init__` method can be documented at class level or inside the `__init__` method itself. Any is acceptable, choose one convention and be consistent on next classes. Note: The parameter `self` should not be part of `Args` section. Args: message (str): Message to be returned. show (bool): Flag to return the message, default=True. \"\"\" self . _message = message self . show = show @property def message ( self ): \"\"\"str: Document properties inside the getter method. Returns: str: message if show is True, empty string otherwise. \"\"\" return self . _message if self . show else \"\"","title":"Template.py"},{"location":"specification/features/basic.feature/","text":"@basic Feature: Basic requirements As a developer, I want to show off my awesome project, So other users can use It too. @version Scenario Outline: Check Cli Given Main module exists When the argument `--show` is \" <value> \" Then \" <output> \" is shown Examples: | value | output | | True | hello world | | False | ***** |","title":"Basic.feature"},{"location":"specification/features/template.feature/","text":"@basic Feature: Template requirements As a regular user, I want to ensure the template has 100% coverage. @version Scenario: Run template functions Given template.py exists Then run all the functions to test coverage","title":"Template.feature"},{"location":"usage/extras/","text":"Documentation Style \u00b6 Code blockquotes with line highlight \u00b6 import typer app = typer . Typer () @app . command () def run ( show : bool = typer . Option ( None , \"--show\" , \"-s\" )): \"\"\"Awesome function.\"\"\" if show : typer . echo ( \"hello world\" ) else : typer . echo ( \"*****\" ) if __name__ == \"__main__\" : app () Source ```Python hl_lines=\"1 7 8 9 10 11 12\" import typer app = typer.Typer() @app.command() def run(show: bool = typer.Option(None, \"--show\", \"-s\")): \"\"\"Awesome function.\"\"\" if show: typer.echo(\"hello world\") else: typer.echo(\" * \") if name == \" main \": app() ``` Footnote \u00b6 This is a footnote 1 and this is another footnote 2 Source This is a footnote[^1] and this is another footnote[^2] [^1]: Footnote 1. [^2]: Footnote 2. Mathematical notation \u00b6 p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} , p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} . Source $p(x|y) = \\frac{p(y|x)p(x)}{p(y)}$, \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\). Message detail \u00b6 Warning Warning message. Source !!! warning Warning message. Tab \u00b6 Tab 1 Markdown content . Multiple paragraphs. Tab 2 More Markdown content . list item a list item b Source === \"Tab 1\" Markdown **content**. Multiple paragraphs. === \"Tab 2\" More Markdown **content**. - list item a - list item b Table \u00b6 First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell Source | First Header | Second Header | Third Header | | ------------ | ------------- | ------------ | | Content Cell | Content Cell | Content Cell | | Content Cell | Content Cell | Content Cell | Task list \u00b6 item 1 item A item B more text item a item b item c item C item 2 item 3 Source - [X] item 1 * [X] item A * [ ] item B more text + [x] item a + [ ] item b + [x] item c * [X] item C - [ ] item 2 - [ ] item 3 More \u00b6 pymdown-extensions mkdocs-material extensions Footnote 1. \u21a9 Footnote 2. \u21a9","title":"Extras"},{"location":"usage/extras/#documentation_style","text":"","title":"Documentation Style"},{"location":"usage/extras/#code_blockquotes_with_line_highlight","text":"import typer app = typer . Typer () @app . command () def run ( show : bool = typer . Option ( None , \"--show\" , \"-s\" )): \"\"\"Awesome function.\"\"\" if show : typer . echo ( \"hello world\" ) else : typer . echo ( \"*****\" ) if __name__ == \"__main__\" : app () Source ```Python hl_lines=\"1 7 8 9 10 11 12\" import typer app = typer.Typer() @app.command() def run(show: bool = typer.Option(None, \"--show\", \"-s\")): \"\"\"Awesome function.\"\"\" if show: typer.echo(\"hello world\") else: typer.echo(\" * \") if name == \" main \": app() ```","title":"Code blockquotes with line highlight"},{"location":"usage/extras/#footnote","text":"This is a footnote 1 and this is another footnote 2 Source This is a footnote[^1] and this is another footnote[^2] [^1]: Footnote 1. [^2]: Footnote 2.","title":"Footnote"},{"location":"usage/extras/#mathematical_notation","text":"p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} , p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} . Source $p(x|y) = \\frac{p(y|x)p(x)}{p(y)}$, \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\).","title":"Mathematical notation"},{"location":"usage/extras/#message_detail","text":"Warning Warning message. Source !!! warning Warning message.","title":"Message detail"},{"location":"usage/extras/#tab","text":"Tab 1 Markdown content . Multiple paragraphs. Tab 2 More Markdown content . list item a list item b Source === \"Tab 1\" Markdown **content**. Multiple paragraphs. === \"Tab 2\" More Markdown **content**. - list item a - list item b","title":"Tab"},{"location":"usage/extras/#table","text":"First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell Source | First Header | Second Header | Third Header | | ------------ | ------------- | ------------ | | Content Cell | Content Cell | Content Cell | | Content Cell | Content Cell | Content Cell |","title":"Table"},{"location":"usage/extras/#task_list","text":"item 1 item A item B more text item a item b item c item C item 2 item 3 Source - [X] item 1 * [X] item A * [ ] item B more text + [x] item a + [ ] item b + [x] item c * [X] item C - [ ] item 2 - [ ] item 3","title":"Task list"},{"location":"usage/extras/#more","text":"pymdown-extensions mkdocs-material extensions Footnote 1. \u21a9 Footnote 2. \u21a9","title":"More"},{"location":"usage/new_project/","text":"Install cookiecutter \u00b6 pip install cookiecutter Create a project from template \u00b6 cookiecutter gh:nullhack/pyproj","title":"New project"},{"location":"usage/new_project/#install_cookiecutter","text":"pip install cookiecutter","title":"Install cookiecutter"},{"location":"usage/new_project/#create_a_project_from_template","text":"cookiecutter gh:nullhack/pyproj","title":"Create a project from template"},{"location":"usage/running/","text":"Clone the repo \u00b6 git clone git@github.com:USERNAME/PROJECT_NAME Change dir to project folder \u00b6 cd PROJECT_NAME Install dev requirements \u00b6 pip install -r dev-requirements.txt Install the project \u00b6 poetry install Run CLI \u00b6 poetry run app --help","title":"Running"},{"location":"usage/running/#clone_the_repo","text":"git clone git@github.com:USERNAME/PROJECT_NAME","title":"Clone the repo"},{"location":"usage/running/#change_dir_to_project_folder","text":"cd PROJECT_NAME","title":"Change dir to project folder"},{"location":"usage/running/#install_dev_requirements","text":"pip install -r dev-requirements.txt","title":"Install dev requirements"},{"location":"usage/running/#install_the_project","text":"poetry install","title":"Install the project"},{"location":"usage/running/#run_cli","text":"poetry run app --help","title":"Run CLI"},{"location":"usage/testing/","text":"Bdd tests \u00b6 nox -s behave Doctests \u00b6 nox -s xdoctest Pre commit tests \u00b6 nox -s precommit","title":"Testing"},{"location":"usage/testing/#bdd_tests","text":"nox -s behave","title":"Bdd tests"},{"location":"usage/testing/#doctests","text":"nox -s xdoctest","title":"Doctests"},{"location":"usage/testing/#pre_commit_tests","text":"nox -s precommit","title":"Pre commit tests"}]}