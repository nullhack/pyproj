{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"about/","text":"An awesome template for python projects using cutting edge tools Documentation : nullhack.github.io/pyproj Source Code : gh:nullhack/pyproj PyProj \u00b6 This project is made to be clean, simple to use and make even the simplest Hello World production ready code. To achieve this, I stand on the shoulder of giants by using, modifying and creating code from multiple sources and projects that are successful, put together into a cookiecutter project ready to be used. Quick start \u00b6 cookiecutter gh:nullhack/pyproj Running \u00b6 nullhack.github.io/pyproj/running/ Testing \u00b6 nullhack.github.io/pyproj/testing/ Features \u00b6 Behave Black Cookiecutter Coverage Darglint Flake8 Isort Material mkdocs Nox Poetry Pre-commit Safety Xdoctest Acknowledgement \u00b6 Contribution guide Fastapi Gitmoji Hypermodern python Napoleon","title":"About"},{"location":"about/#pyproj","text":"This project is made to be clean, simple to use and make even the simplest Hello World production ready code. To achieve this, I stand on the shoulder of giants by using, modifying and creating code from multiple sources and projects that are successful, put together into a cookiecutter project ready to be used.","title":"PyProj"},{"location":"about/#quick_start","text":"cookiecutter gh:nullhack/pyproj","title":"Quick start"},{"location":"about/#running","text":"nullhack.github.io/pyproj/running/","title":"Running"},{"location":"about/#testing","text":"nullhack.github.io/pyproj/testing/","title":"Testing"},{"location":"about/#features","text":"Behave Black Cookiecutter Coverage Darglint Flake8 Isort Material mkdocs Nox Poetry Pre-commit Safety Xdoctest","title":"Features"},{"location":"about/#acknowledgement","text":"Contribution guide Fastapi Gitmoji Hypermodern python Napoleon","title":"Acknowledgement"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of conduct"},{"location":"code_of_conduct/#contributor_covenant_code_of_conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our_pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our_standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our_responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"contributing/","text":"Contributing to Open Source Projects \u00b6 About \u00b6 This document provides a set of best practices for open source contributions - bug reports, code submissions / pull requests, etc. For the most part, these guidelines apply equally to any project regardless of programming language or topic. Where applicable, we outline where individual projects/languages may have additional requirements. Naturally, this document is itself open source, and we encourage feedback & suggestions for improvement. Sources \u00b6 Currently this document draws from the contribution documentation for a handful of related Python open source projects: Fabric <http://fabfile.org> , Invoke <http://pyinvoke.org> , Paramiko <http://paramiko.org> _, etc. It's expected that over time we will incorporate additional material from related attempts at consolidating this type of info. We'll update with a list here when that happens. Submitting bugs \u00b6 Due diligence \u00b6 Before submitting a bug, please do the following: Perform basic troubleshooting steps: Make sure you're on the latest version. If you're not on the most recent version, your problem may have been solved already! Upgrading is always the best first step. Try older versions. If you're already on the latest release, try rolling back a few minor versions (e.g. if on 1.7, try 1.5 or 1.6) and see if the problem goes away. This will help the devs narrow down when the problem first arose in the commit log. Try switching up dependency versions. If the software in question has dependencies (other libraries, etc) try upgrading/downgrading those as well. Search the project's bug/issue tracker to make sure it's not a known issue. If you don't find a pre-existing issue, consider checking with the mailing list and/or IRC channel in case the problem is non-bug-related. What to put in your bug report \u00b6 Make sure your report gets the attention it deserves: bug reports with missing information may be ignored or punted back to you, delaying a fix. The below constitutes a bare minimum; more info is almost always better: What version of the core programming language interpreter/compiler are you using? For example, if it's a Python project, are you using Python 2.7.3? Python 3.3.1? PyPy 2.0? What operating system are you on? Windows? (Vista? 7? 32-bit? 64-bit?) Mac OS X? (10.7.4? 10.9.0?) Linux? (Which distro? Which version of that distro? 32 or 64 bits?) Again, more detail is better. Which version or versions of the software are you using? Ideally, you followed the advice above and have ruled out (or verified that the problem exists in) a few different versions. How can the developers recreate the bug on their end? If possible, include a copy of your code, the command you used to invoke it, and the full output of your run (if applicable.) A common tactic is to pare down your code until a simple (but still bug-causing) \"base case\" remains. Not only can this help you identify problems which aren't real bugs, but it means the developer can get to fixing the bug faster. Contributing changes \u00b6 Licensing of contributed material \u00b6 Keep in mind as you contribute, that code, docs and other material submitted to open source projects are usually considered licensed under the same terms as the rest of the work. The details vary from project to project, but from the perspective of this document's authors: Anything submitted to a project falls under the licensing terms in the repository's top level LICENSE file. For example, if a project's LICENSE is BSD-based, contributors should be comfortable with their work potentially being distributed in binary form without the original source code. Per-file copyright/license headers are typically extraneous and undesirable. Please don't add your own copyright headers to new files unless the project's license actually requires them! Not least because even a new file created by one individual (who often feels compelled to put their personal copyright notice at the top) will inherently end up contributed to by dozens of others over time, making a per-file header outdated/misleading. Version control branching \u00b6 Always make a new branch for your work, no matter how small. This makes it easy for others to take just that one set of changes from your repository, in case you have multiple unrelated changes floating around. A corollary: don't submit unrelated changes in the same branch/pull request ! The maintainer shouldn't have to reject your awesome bugfix because the feature you put in with it needs more review. Base your new branch off of the appropriate branch on the main repository: Bug fixes should be based on the branch named after the oldest supported release line the bug affects. E.g. if a feature was introduced in 1.1, the latest release line is 1.3, and a bug is found in that feature - make your branch based on 1.1. The maintainer will then forward-port it to 1.3 and master. Bug fixes requiring large changes to the code or which have a chance of being otherwise disruptive, may need to base off of master instead. This is a judgement call -- ask the devs! New features should branch off of the 'master' branch . Note that depending on how long it takes for the dev team to merge your patch, the copy of master you worked off of may get out of date! If you find yourself 'bumping' a pull request that's been sidelined for a while, make sure you rebase or merge to latest master to ensure a speedier resolution. Code formatting \u00b6 Follow the style you see used in the primary repository ! Consistency with the rest of the project always trumps other considerations. It doesn't matter if you have your own style or if the rest of the code breaks with the greater community - just follow along. Python projects usually follow the PEP-8 <http://www.python.org/dev/peps/pep-0008/> _ guidelines (though many have minor deviations depending on the lead maintainers' preferences.) Documentation isn't optional \u00b6 It's not! Patches without documentation will be returned to sender. By \"documentation\" we mean: Docstrings (for Python; or API-doc-friendly comments for other languages) must be created or updated for public API functions/methods/etc. (This step is optional for some bugfixes.) Don't forget to include versionadded <http://sphinx-doc.org/markup/para.html#directive-versionadded> / versionchanged <http://sphinx-doc.org/markup/para.html#directive-versionchanged> ReST directives at the bottom of any new or changed Python docstrings! Use versionadded for truly new API members -- new methods, functions, classes or modules. Use versionchanged when adding/removing new function/method arguments, or whenever behavior changes. New features should ideally include updates to prose documentation , including useful example code snippets. All submissions should have a changelog entry crediting the contributor and/or any individuals instrumental in identifying the problem. Tests aren't optional \u00b6 Any bugfix that doesn't include a test proving the existence of the bug being fixed, may be suspect. Ditto for new features that can't prove they actually work. We've found that test-first development really helps make features better architected and identifies potential edge cases earlier instead of later. Writing tests before the implementation is strongly encouraged. Full example \u00b6 Here's an example workflow for a project theproject hosted on Github, which is currently in version 1.3.x. Your username is yourname and you're submitting a basic bugfix. (This workflow only changes slightly if the project is hosted at Bitbucket, self-hosted, or etc.) Preparing your Fork ^^^^^^^^^^^^^^^^^^^ Click 'Fork' on Github, creating e.g. yourname/theproject . Clone your project: git clone git@github.com:yourname/theproject . cd theproject Create and activate a virtual environment <https://packaging.python.org/tutorials/installing-packages/#creating-virtual-environments> _. Install the development requirements: pip install -r dev-requirements.txt . Create a branch: git checkout -b foo-the-bars 1.3 . Making your Changes ^^^^^^^^^^^^^^^^^^^ Add changelog entry crediting yourself. Write tests expecting the correct/fixed functionality; make sure they fail. Hack, hack, hack. Run tests again, making sure they pass. Commit your changes: git commit -m \"Foo the bars\" Creating Pull Requests ^^^^^^^^^^^^^^^^^^^^^^ Push your commit to get it back up to your fork: git push origin HEAD Visit Github, click handy \"Pull request\" button that it will make upon noticing your new branch. In the description field, write down issue number (if submitting code fixing an existing issue) or describe the issue + your fix (if submitting a wholly new bugfix). Hit 'submit'! And please be patient - the maintainers will get to you when they can. To contribute \u00b6 The general workflow that GitHub supports is: Fork this repo to your own account. Clone the repo to your machine. Check out a new \"topic branch\" and make changes. Push your topic branch to your fork. Use the diff viewer on GitHub to create a pull request via a discussion. Make any requested changes . The pull request is then merged and the \"topic branch\" is deleted from the upstream (target) repo. The naming conventions for topic branches are: issue_ID, where the ID is the ID # of a GitHub issue. Use official guides: https://help.github.com/articles/fork-a-repo/ https://guides.github.com/activities/forking/ Or the reference tutorial for this documentation. Some commands that would complete the workflow above: Step 1 : Forking In the top-right corner of the page, click Fork Button Step 2 : Cloning Clone the repo using your own github login (YOUR_USERNAME): git clone git@github.com:YOUR_USERNAME/python-project-builder.git Step 3 : Adding the Upstream Remote Change into the directory and then you can add the upstream remote: cd python-project-builder git remote add upstream git@github.com:nullhack/python-project-builder.git To pull in changes from the source locally and merge them: git fetch upstream git merge upstream/master Step 4 : Checking Out a Topic Branch Checkout a topic branch using the issue ID: git checkout -b issue_ID Step 5 : Committing Make your changes and create a commit that tracks those changes. git commit -am \"adding some specific change.\" Step 6 : Pushing Push this topic branch to your own fork of the project. git push origin issue_ID Step 7 : Creating a Pull Request Now you may create a pull request: Go to your fork of the repo Click on issue_ID at \"your recently pushed branches\" Choose \"Compare and Pull Request\" Or: Select your branch from the dropdown click \"Pull Request\" or \"Compare\" \u2191","title":"Contributing"},{"location":"contributing/#contributing_to_open_source_projects","text":"","title":"Contributing to Open Source Projects"},{"location":"contributing/#about","text":"This document provides a set of best practices for open source contributions - bug reports, code submissions / pull requests, etc. For the most part, these guidelines apply equally to any project regardless of programming language or topic. Where applicable, we outline where individual projects/languages may have additional requirements. Naturally, this document is itself open source, and we encourage feedback & suggestions for improvement.","title":"About"},{"location":"contributing/#sources","text":"Currently this document draws from the contribution documentation for a handful of related Python open source projects: Fabric <http://fabfile.org> , Invoke <http://pyinvoke.org> , Paramiko <http://paramiko.org> _, etc. It's expected that over time we will incorporate additional material from related attempts at consolidating this type of info. We'll update with a list here when that happens.","title":"Sources"},{"location":"contributing/#submitting_bugs","text":"","title":"Submitting bugs"},{"location":"contributing/#due_diligence","text":"Before submitting a bug, please do the following: Perform basic troubleshooting steps: Make sure you're on the latest version. If you're not on the most recent version, your problem may have been solved already! Upgrading is always the best first step. Try older versions. If you're already on the latest release, try rolling back a few minor versions (e.g. if on 1.7, try 1.5 or 1.6) and see if the problem goes away. This will help the devs narrow down when the problem first arose in the commit log. Try switching up dependency versions. If the software in question has dependencies (other libraries, etc) try upgrading/downgrading those as well. Search the project's bug/issue tracker to make sure it's not a known issue. If you don't find a pre-existing issue, consider checking with the mailing list and/or IRC channel in case the problem is non-bug-related.","title":"Due diligence"},{"location":"contributing/#what_to_put_in_your_bug_report","text":"Make sure your report gets the attention it deserves: bug reports with missing information may be ignored or punted back to you, delaying a fix. The below constitutes a bare minimum; more info is almost always better: What version of the core programming language interpreter/compiler are you using? For example, if it's a Python project, are you using Python 2.7.3? Python 3.3.1? PyPy 2.0? What operating system are you on? Windows? (Vista? 7? 32-bit? 64-bit?) Mac OS X? (10.7.4? 10.9.0?) Linux? (Which distro? Which version of that distro? 32 or 64 bits?) Again, more detail is better. Which version or versions of the software are you using? Ideally, you followed the advice above and have ruled out (or verified that the problem exists in) a few different versions. How can the developers recreate the bug on their end? If possible, include a copy of your code, the command you used to invoke it, and the full output of your run (if applicable.) A common tactic is to pare down your code until a simple (but still bug-causing) \"base case\" remains. Not only can this help you identify problems which aren't real bugs, but it means the developer can get to fixing the bug faster.","title":"What to put in your bug report"},{"location":"contributing/#contributing_changes","text":"","title":"Contributing changes"},{"location":"contributing/#licensing_of_contributed_material","text":"Keep in mind as you contribute, that code, docs and other material submitted to open source projects are usually considered licensed under the same terms as the rest of the work. The details vary from project to project, but from the perspective of this document's authors: Anything submitted to a project falls under the licensing terms in the repository's top level LICENSE file. For example, if a project's LICENSE is BSD-based, contributors should be comfortable with their work potentially being distributed in binary form without the original source code. Per-file copyright/license headers are typically extraneous and undesirable. Please don't add your own copyright headers to new files unless the project's license actually requires them! Not least because even a new file created by one individual (who often feels compelled to put their personal copyright notice at the top) will inherently end up contributed to by dozens of others over time, making a per-file header outdated/misleading.","title":"Licensing of contributed material"},{"location":"contributing/#version_control_branching","text":"Always make a new branch for your work, no matter how small. This makes it easy for others to take just that one set of changes from your repository, in case you have multiple unrelated changes floating around. A corollary: don't submit unrelated changes in the same branch/pull request ! The maintainer shouldn't have to reject your awesome bugfix because the feature you put in with it needs more review. Base your new branch off of the appropriate branch on the main repository: Bug fixes should be based on the branch named after the oldest supported release line the bug affects. E.g. if a feature was introduced in 1.1, the latest release line is 1.3, and a bug is found in that feature - make your branch based on 1.1. The maintainer will then forward-port it to 1.3 and master. Bug fixes requiring large changes to the code or which have a chance of being otherwise disruptive, may need to base off of master instead. This is a judgement call -- ask the devs! New features should branch off of the 'master' branch . Note that depending on how long it takes for the dev team to merge your patch, the copy of master you worked off of may get out of date! If you find yourself 'bumping' a pull request that's been sidelined for a while, make sure you rebase or merge to latest master to ensure a speedier resolution.","title":"Version control branching"},{"location":"contributing/#code_formatting","text":"Follow the style you see used in the primary repository ! Consistency with the rest of the project always trumps other considerations. It doesn't matter if you have your own style or if the rest of the code breaks with the greater community - just follow along. Python projects usually follow the PEP-8 <http://www.python.org/dev/peps/pep-0008/> _ guidelines (though many have minor deviations depending on the lead maintainers' preferences.)","title":"Code formatting"},{"location":"contributing/#documentation_isnt_optional","text":"It's not! Patches without documentation will be returned to sender. By \"documentation\" we mean: Docstrings (for Python; or API-doc-friendly comments for other languages) must be created or updated for public API functions/methods/etc. (This step is optional for some bugfixes.) Don't forget to include versionadded <http://sphinx-doc.org/markup/para.html#directive-versionadded> / versionchanged <http://sphinx-doc.org/markup/para.html#directive-versionchanged> ReST directives at the bottom of any new or changed Python docstrings! Use versionadded for truly new API members -- new methods, functions, classes or modules. Use versionchanged when adding/removing new function/method arguments, or whenever behavior changes. New features should ideally include updates to prose documentation , including useful example code snippets. All submissions should have a changelog entry crediting the contributor and/or any individuals instrumental in identifying the problem.","title":"Documentation isn't optional"},{"location":"contributing/#tests_arent_optional","text":"Any bugfix that doesn't include a test proving the existence of the bug being fixed, may be suspect. Ditto for new features that can't prove they actually work. We've found that test-first development really helps make features better architected and identifies potential edge cases earlier instead of later. Writing tests before the implementation is strongly encouraged.","title":"Tests aren't optional"},{"location":"contributing/#full_example","text":"Here's an example workflow for a project theproject hosted on Github, which is currently in version 1.3.x. Your username is yourname and you're submitting a basic bugfix. (This workflow only changes slightly if the project is hosted at Bitbucket, self-hosted, or etc.) Preparing your Fork ^^^^^^^^^^^^^^^^^^^ Click 'Fork' on Github, creating e.g. yourname/theproject . Clone your project: git clone git@github.com:yourname/theproject . cd theproject Create and activate a virtual environment <https://packaging.python.org/tutorials/installing-packages/#creating-virtual-environments> _. Install the development requirements: pip install -r dev-requirements.txt . Create a branch: git checkout -b foo-the-bars 1.3 . Making your Changes ^^^^^^^^^^^^^^^^^^^ Add changelog entry crediting yourself. Write tests expecting the correct/fixed functionality; make sure they fail. Hack, hack, hack. Run tests again, making sure they pass. Commit your changes: git commit -m \"Foo the bars\" Creating Pull Requests ^^^^^^^^^^^^^^^^^^^^^^ Push your commit to get it back up to your fork: git push origin HEAD Visit Github, click handy \"Pull request\" button that it will make upon noticing your new branch. In the description field, write down issue number (if submitting code fixing an existing issue) or describe the issue + your fix (if submitting a wholly new bugfix). Hit 'submit'! And please be patient - the maintainers will get to you when they can.","title":"Full example"},{"location":"contributing/#to_contribute","text":"The general workflow that GitHub supports is: Fork this repo to your own account. Clone the repo to your machine. Check out a new \"topic branch\" and make changes. Push your topic branch to your fork. Use the diff viewer on GitHub to create a pull request via a discussion. Make any requested changes . The pull request is then merged and the \"topic branch\" is deleted from the upstream (target) repo. The naming conventions for topic branches are: issue_ID, where the ID is the ID # of a GitHub issue. Use official guides: https://help.github.com/articles/fork-a-repo/ https://guides.github.com/activities/forking/ Or the reference tutorial for this documentation. Some commands that would complete the workflow above: Step 1 : Forking In the top-right corner of the page, click Fork Button Step 2 : Cloning Clone the repo using your own github login (YOUR_USERNAME): git clone git@github.com:YOUR_USERNAME/python-project-builder.git Step 3 : Adding the Upstream Remote Change into the directory and then you can add the upstream remote: cd python-project-builder git remote add upstream git@github.com:nullhack/python-project-builder.git To pull in changes from the source locally and merge them: git fetch upstream git merge upstream/master Step 4 : Checking Out a Topic Branch Checkout a topic branch using the issue ID: git checkout -b issue_ID Step 5 : Committing Make your changes and create a commit that tracks those changes. git commit -am \"adding some specific change.\" Step 6 : Pushing Push this topic branch to your own fork of the project. git push origin issue_ID Step 7 : Creating a Pull Request Now you may create a pull request: Go to your fork of the repo Click on issue_ID at \"your recently pushed branches\" Choose \"Compare and Pull Request\" Or: Select your branch from the dropdown click \"Pull Request\" or \"Compare\" \u2191","title":"To contribute"},{"location":"license/","text":"MIT License Copyright (c) 2020 NullHack Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"reference/cli.py/","text":"\"\"\"Command line interface. Awesome CLI description. \"\"\" import typer app = typer . Typer () @app . command () def run ( show : bool = typer . Option ( None , \"--show\" , \"-s\" )): \"\"\"Awesome function.\"\"\" if show : typer . echo ( \"hello world\" ) else : typer . echo ( \"*****\" ) if __name__ == \"__main__\" : app ()","title":"Cli.py"},{"location":"reference/python_project_template/__init__.py/","text":"\"\"\"Awesome init file.\"\"\"","title":"  init  .py"},{"location":"reference/python_project_template/template.py/","text":"# -*- coding: utf-8 -*- \"\"\"Awesome template. This module demonstrates documentation as specified by the `Google Python Style Guide`_. Docstrings may extend over multiple lines. Sections are created with a section header and a colon followed by a block of indented text. Example: Examples can be given using either the ``Example`` or ``Examples`` sections. Sections support any reStructuredText formatting, including literal blocks:: $ python template.py Section breaks are created by resuming unindented text. Section breaks are also implicitly created anytime a new section starts. Attributes: module_level_variable1 (int): Module level variables may be documented in either the ``Attributes`` section of the module docstring, or in an inline docstring immediately following the variable. Either form is acceptable, but the two should not be mixed. Choose one convention to document module level variables and be consistent with it. Todo: * For module TODOs .. _Google Python Style Guide: http://google.github.io/styleguide/pyguide.html \"\"\" module_level_variable1 = 12345 def function_with_types_in_docstring ( param1 , param2 ): \"\"\"Execute a function with types documented in the docstring. `PEP 484`_ type annotations are supported. If attribute, parameter, and return types are annotated according to `PEP 484`_, they do not need to be included in the docstring: Args: param1 (int): The first parameter. param2 (str): The second parameter. Return: bool: The return value. True for success, False otherwise. .. _PEP 484: https://www.python.org/dev/peps/pep-0484/ \"\"\" def function_with_pep484_type_annotations ( param1 : int , param2 : str ) -> bool : \"\"\"Execute a function with PEP 484 type annotations. Args: param1: The first parameter. param2: The second parameter. Return: The return value. True for success, False otherwise. \"\"\" def module_level_function ( param1 , param2 = None , * args , ** kwargs ): \"\"\"Create an example of a module level function. Function parameters should be documented in the ``Args`` section. The name of each parameter is required. The type and description of each parameter is optional, but should be included if not obvious. If *args or **kwargs are accepted, they should be listed as ``*args`` and ``**kwargs``. The format for a parameter is:: name (type): description The description may span multiple lines. Following lines should be indented. The \"(type)\" is optional. Multiple paragraphs are supported in parameter descriptions. Args: param1 (int): The first parameter. param2 (:obj:`str`, optional): The second parameter. Defaults to None. Second line of description should be indented. *args: Variable length argument list. **kwargs: Arbitrary keyword arguments. Returns: bool: True if successful, False otherwise. The return type is optional and may be specified at the beginning of the ``Returns`` section followed by a colon. The ``Returns`` section may span multiple lines and paragraphs. Following lines should be indented to match the first line. The ``Returns`` section supports any reStructuredText formatting, including literal blocks:: { 'param1': param1, 'param2': param2 } Raises: ValueError: If `param2` is equal to `param1`. \"\"\" if param1 == param2 : raise ValueError ( \"param1 may not be equal to param2\" ) return True def example_generator ( n ): \"\"\"Create a generator with ``Yields`` section instead of a ``Returns`` section. Args: n (int): The upper limit of the range to generate, from 0 to `n` - 1. Yields: int: The next number in the range of 0 to `n` - 1. Examples: Examples should be written in doctest format, and should illustrate how to use the function. >>> print([i for i in example_generator(4)]) [0, 1, 2, 3] \"\"\" for i in range ( n ): yield i class ExampleError ( Exception ): \"\"\"Exceptions are documented in the same way as classes. The __init__ method may be documented in either the class level docstring, or as a docstring on the __init__ method itself. Either form is acceptable, but the two should not be mixed. Choose one convention to document the __init__ method and be consistent with it. Note: Do not include the `self` parameter in the ``Args`` section. Args: msg (str): Human readable string describing the exception. code (:obj:`int`, optional): Error code. Attributes: msg (str): Human readable string describing the exception. code (int): Exception error code. \"\"\" def __init__ ( self , msg , code ): \"\"\"Create the init for the Exception. Args: msg (str): Human readable string describing the exception. code (:obj:`int`, optional): Error code. \"\"\" self . msg = msg self . code = code class ExampleClass ( object ): \"\"\"Create a class, the summary line for a class docstring should fit on one line. If the class has public attributes, they may be documented here in an ``Attributes`` section and follow the same formatting as a function's ``Args`` section. Alternatively, attributes may be documented inline with the attribute's declaration (see __init__ method below). Properties created with the ``@property`` decorator should be documented in the property's getter method. Attributes: attr1 (str): Description of `attr1`. attr2 (:obj:`int`, optional): Description of `attr2`. \"\"\" def __init__ ( self , param1 , param2 , param3 ): \"\"\"Create a docstring on the __init__ method. The __init__ method may be documented in either the class level docstring, or as a docstring on the __init__ method itself. Either form is acceptable, but the two should not be mixed. Choose one convention to document the __init__ method and be consistent with it. Note: Do not include the `self` parameter in the ``Args`` section. Args: param1 (str): Description of `param1`. param2 (:obj:`int`, optional): Description of `param2`. Multiple lines are supported. param3 (:obj:`list` of :obj:`str`): Description of `param3`. \"\"\" self . attr1 = param1 self . attr2 = param2 self . attr3 = param3 #: Doc comment *inline* with attribute #: list of str: Doc comment *before* attribute, with type specified self . attr4 = [ \"attr4\" ] self . attr5 = None \"\"\"str: Docstring *after* attribute, with type specified.\"\"\" @property def readonly_property ( self ): \"\"\"str: Properties should be documented in their getter method. Returns: str: property \"\"\" return \"readonly_property\" @property def readwrite_property ( self ): \"\"\"Create an example of read/write property. :obj:`list` of :obj:`str`: Properties with both a getter and setter should only be documented in their getter method. If the setter method contains notable behavior, it should be mentioned here. Returns: list: property \"\"\" return [ \"readwrite_property\" ] @readwrite_property . setter def readwrite_property ( self , value ): value def example_method ( self , param1 , param2 ): \"\"\"Class methods are similar to regular functions. Note: Do not include the `self` parameter in the ``Args`` section. Args: param1: The first parameter. param2: The second parameter. Returns: True if successful, False otherwise. \"\"\" return True def __special__ ( self ): \"\"\"By default special members with docstrings are not included. Special members are any methods or attributes that start with and end with a double underscore. Any special member with a docstring will be included in the output, if ``napoleon_include_special_with_doc`` is set to True. This behavior can be enabled by changing the following setting in Sphinx's conf.py:: napoleon_include_special_with_doc = True \"\"\" pass def __special_without_docstring__ ( self ): \"\"\"Create a special method.\"\"\" pass def _private ( self ): \"\"\"By default private members are not included. Private members are any methods or attributes that start with an underscore and are *not* special. By default they are not included in the output. This behavior can be changed such that private members *are* included by changing the following setting in Sphinx's conf.py:: napoleon_include_private_with_doc = True \"\"\" pass def _private_without_docstring ( self ): pass","title":"Template.py"},{"location":"specification/features/basic.feature/","text":"@basic Feature: Basic requirements As a developer, I want to show off my awesome project, So other users can use It too. @version Scenario Outline: Check Cli Given Main module exists When the argument `--show` is \" <value> \" Then \" <output> \" is shown Examples: | value | output | | True | hello world | | False | ***** |","title":"Basic.feature"},{"location":"specification/features/template.feature/","text":"@basic Feature: Template requirements As a regular user, I want to ensure the template has 100% coverage. @version Scenario: Run template functions Given template.py exists Then run all the functions to test coverage","title":"Template.feature"},{"location":"usage/extras/","text":"Extras \u00b6 Documentation Style \u00b6 Code blockquotes with line highlight \u00b6 import typer app = typer . Typer () @app . command () def run ( show : bool = typer . Option ( None , \"--show\" , \"-s\" )): \"\"\"Awesome function.\"\"\" if show : typer . echo ( \"hello world\" ) else : typer . echo ( \"*****\" ) if __name__ == \"__main__\" : app () Source Python hl_lines=\"1 7 8 9 10 11 12\" import typer app = typer.Typer() @app.command() def run(show: bool = typer.Option(None, \"--show\", \"-s\")): \"\"\"Awesome function.\"\"\" if show: typer.echo(\"hello world\") else: typer.echo(\" * \") if name == \" main \": app() Footnote \u00b6 This is a footnote 1 and this is another footnote 2 Source This is a footnote[^1] and this is another footnote[^2] [^1]: Footnote 1. [^2]: Footnote 2. Mathematical notation \u00b6 p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} , p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} . Source $p(x|y) = \\frac{p(y|x)p(x)}{p(y)}$, \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\). Message detail \u00b6 Warning Warning message. Source !!! warning Warning message. Tab \u00b6 Tab 1 Markdown content . Multiple paragraphs. Tab 2 More Markdown content . list item a list item b Source === \"Tab 1\" Markdown **content**. Multiple paragraphs. === \"Tab 2\" More Markdown **content**. - list item a - list item b Table \u00b6 First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell Source | First Header | Second Header | Third Header | | ------------ | ------------- | ------------ | | Content Cell | Content Cell | Content Cell | | Content Cell | Content Cell | Content Cell | Task list \u00b6 item 1 item A item B more text item a item b item c item C item 2 item 3 Source - [X] item 1 * [X] item A * [ ] item B more text + [x] item a + [ ] item b + [x] item c * [X] item C - [ ] item 2 - [ ] item 3 More \u00b6 pymdown-extensions mkdocs-material extensions Footnote 1. \u21a9 Footnote 2. \u21a9","title":"Extras"},{"location":"usage/extras/#extras","text":"","title":"Extras"},{"location":"usage/extras/#documentation_style","text":"","title":"Documentation Style"},{"location":"usage/extras/#code_blockquotes_with_line_highlight","text":"import typer app = typer . Typer () @app . command () def run ( show : bool = typer . Option ( None , \"--show\" , \"-s\" )): \"\"\"Awesome function.\"\"\" if show : typer . echo ( \"hello world\" ) else : typer . echo ( \"*****\" ) if __name__ == \"__main__\" : app () Source Python hl_lines=\"1 7 8 9 10 11 12\" import typer app = typer.Typer() @app.command() def run(show: bool = typer.Option(None, \"--show\", \"-s\")): \"\"\"Awesome function.\"\"\" if show: typer.echo(\"hello world\") else: typer.echo(\" * \") if name == \" main \": app()","title":"Code blockquotes with line highlight"},{"location":"usage/extras/#footnote","text":"This is a footnote 1 and this is another footnote 2 Source This is a footnote[^1] and this is another footnote[^2] [^1]: Footnote 1. [^2]: Footnote 2.","title":"Footnote"},{"location":"usage/extras/#mathematical_notation","text":"p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} , p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} . Source $p(x|y) = \\frac{p(y|x)p(x)}{p(y)}$, \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\).","title":"Mathematical notation"},{"location":"usage/extras/#message_detail","text":"Warning Warning message. Source !!! warning Warning message.","title":"Message detail"},{"location":"usage/extras/#tab","text":"Tab 1 Markdown content . Multiple paragraphs. Tab 2 More Markdown content . list item a list item b Source === \"Tab 1\" Markdown **content**. Multiple paragraphs. === \"Tab 2\" More Markdown **content**. - list item a - list item b","title":"Tab"},{"location":"usage/extras/#table","text":"First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell Source | First Header | Second Header | Third Header | | ------------ | ------------- | ------------ | | Content Cell | Content Cell | Content Cell | | Content Cell | Content Cell | Content Cell |","title":"Table"},{"location":"usage/extras/#task_list","text":"item 1 item A item B more text item a item b item c item C item 2 item 3 Source - [X] item 1 * [X] item A * [ ] item B more text + [x] item a + [ ] item b + [x] item c * [X] item C - [ ] item 2 - [ ] item 3","title":"Task list"},{"location":"usage/extras/#more","text":"pymdown-extensions mkdocs-material extensions Footnote 1. \u21a9 Footnote 2. \u21a9","title":"More"},{"location":"usage/new_project/","text":"New project \u00b6 Cookie Cutter \u00b6 pip install cookiecutter cookiecutter gh:nullhack/pyproj","title":"New project"},{"location":"usage/new_project/#new_project","text":"","title":"New project"},{"location":"usage/new_project/#cookie_cutter","text":"pip install cookiecutter cookiecutter gh:nullhack/pyproj","title":"Cookie Cutter"},{"location":"usage/running/","text":"Running \u00b6 Project Setup \u00b6 To download this template: Clone the template project If you want to create your own project: (Optional) Edit config.ini file Generate project files Move into the new created project dir (Optional) Change README file (Optional) Create a new virtual environment (Optional) Install project's requirements-dev file (Optional) Generate documentation (Optional) Run the tests (Optional) Install the project Run the project Step 1 : Clone the template project: git clone https://github.com/nullhack/python-project-builder.git Step 2 : (Optional) Edit config.ini file to fit your project: gedit ./python-project-builder/config.ini Step 3 : Generate project files based on egg template dir: python3 ./python-project-builder/gen.py If you've edited conf.ini file or want to use it directly: python3 ./python-project-builder/gen.py -c If you want to generate files in specific DIRNAME: python3 ./python-project-builder/gen.py DIRNAME For a complete list of commands, please see Usage section. Step 4 : Move into the new created project DIRNAME: cd DIRNAME Step 5 : (Optional) Change README file with your own text Step 6 : (Optional, but good practice) Create a new virtual environment (ENV) for your project: python3 -m venv ENV source ENV/bin/activate If you want to deactivate the virtual environment: deactivate If you are new to virtual environments, please see the Virtual Environment section of Kenneth Reitz's Hitchhiker's Guide to Python . Step 7 : (Optional) Install project's requirements-dev file: pip3 install -r requirements-dev.txt Step 8 : (Optional) Generate documentation for new modules: sphinx-apidoc -f -o ./docs/source/_apidoc/ ./ python3 setup.py build_sphinx The html generated should be in ./docs/build/html Step 9 : (Optional) Run the tests: python3 -m doctest -v ./tests/* Step 10 : (Optional) Install the project: python3 setup.py install If the project is being developed or you have not set a virtual environment yet: python3 setup.py develop Step 11 : Run the project: python3 main.py \u2191 Usage: \u00b6 gen.py [-h] [-c] [-d] [-e PATH] [-f] [dir_name] Positional arguments: \u00b6 dir_name directory where the project will be generated Optional arguments: \u00b6 -h, --help show this help message and exit -c, --config-file use config file info instead of asking -d, --delete delete project builder files after project creation -e PATH, --egg PATH specify another egg template to use -f, --force force project deletion if it already exist \u2191","title":"Running"},{"location":"usage/running/#running","text":"","title":"Running"},{"location":"usage/running/#project_setup","text":"To download this template: Clone the template project If you want to create your own project: (Optional) Edit config.ini file Generate project files Move into the new created project dir (Optional) Change README file (Optional) Create a new virtual environment (Optional) Install project's requirements-dev file (Optional) Generate documentation (Optional) Run the tests (Optional) Install the project Run the project Step 1 : Clone the template project: git clone https://github.com/nullhack/python-project-builder.git Step 2 : (Optional) Edit config.ini file to fit your project: gedit ./python-project-builder/config.ini Step 3 : Generate project files based on egg template dir: python3 ./python-project-builder/gen.py If you've edited conf.ini file or want to use it directly: python3 ./python-project-builder/gen.py -c If you want to generate files in specific DIRNAME: python3 ./python-project-builder/gen.py DIRNAME For a complete list of commands, please see Usage section. Step 4 : Move into the new created project DIRNAME: cd DIRNAME Step 5 : (Optional) Change README file with your own text Step 6 : (Optional, but good practice) Create a new virtual environment (ENV) for your project: python3 -m venv ENV source ENV/bin/activate If you want to deactivate the virtual environment: deactivate If you are new to virtual environments, please see the Virtual Environment section of Kenneth Reitz's Hitchhiker's Guide to Python . Step 7 : (Optional) Install project's requirements-dev file: pip3 install -r requirements-dev.txt Step 8 : (Optional) Generate documentation for new modules: sphinx-apidoc -f -o ./docs/source/_apidoc/ ./ python3 setup.py build_sphinx The html generated should be in ./docs/build/html Step 9 : (Optional) Run the tests: python3 -m doctest -v ./tests/* Step 10 : (Optional) Install the project: python3 setup.py install If the project is being developed or you have not set a virtual environment yet: python3 setup.py develop Step 11 : Run the project: python3 main.py \u2191","title":"Project Setup"},{"location":"usage/running/#usage","text":"gen.py [-h] [-c] [-d] [-e PATH] [-f] [dir_name]","title":"Usage:"},{"location":"usage/running/#positional_arguments","text":"dir_name directory where the project will be generated","title":"Positional arguments:"},{"location":"usage/running/#optional_arguments","text":"-h, --help show this help message and exit -c, --config-file use config file info instead of asking -d, --delete delete project builder files after project creation -e PATH, --egg PATH specify another egg template to use -f, --force force project deletion if it already exist \u2191","title":"Optional arguments:"},{"location":"usage/testing/","text":"Testing \u00b6 Bdd tests \u00b6 nox -s behave Doctests \u00b6 nox -s xdoctest Pre commit tests \u00b6 nox -s precommit","title":"Testing"},{"location":"usage/testing/#testing","text":"","title":"Testing"},{"location":"usage/testing/#bdd_tests","text":"nox -s behave","title":"Bdd tests"},{"location":"usage/testing/#doctests","text":"nox -s xdoctest","title":"Doctests"},{"location":"usage/testing/#pre_commit_tests","text":"nox -s precommit","title":"Pre commit tests"}]}